// Backend/src/controllers/coachProfileController.js
const { v4: uuidv4 } = require('uuid');
const path = require('path');
const fs = require('fs');
const User = require('../models/user');
const CoachProfile = require('../models/CoachProfile');
const ClientProfile = require('../models/ClientProfile');
const Event = require('../models/Event');
const Testimonial = require('../models/Testimonial');

// ==============================
// Helper: Safe JSON parse
// ==============================
const safeParse = (value) => {
Â  if (typeof value === 'string') {
Â  Â  try { return JSON.parse(value); } catch { return value; }
Â  }
Â  return value;
};

// ==============================
// GET Coach Profile (logged-in)
// ==============================
const getCoachProfile = async (req, res) => {
Â  try {
Â  Â  const userId = req.user?.userId; 
Â  Â  if (!userId) return res.status(401).json({ error: 'User ID missing from token' });

Â  Â  const user = await User.findByPk(userId, {
        include: [
            { model: CoachProfile, as: 'CoachProfile' }, 
            { model: ClientProfile, as: 'ClientProfile' }
        ],
    });

Â  Â  if (!user) {
Â  Â  Â  return res.status(404).json({ error: 'User not found' });
Â  Â  }

Â  Â  res.json({ user: user.get({ plain: true }) });

Â  } catch (error) {
Â  Â  console.error('Error fetching coach profile:', error);
Â  Â  res.status(500).json({ error: 'Internal server error' });
Â  }
};

// ==============================
// UPDATE Coach Profile <<< FIX APPLIED HERE >>>
// ==============================
const updateCoachProfile = async (req, res) => {
Â  try {
Â  Â  const userId = req.user?.userId;
    if (!userId) return res.status(401).json({ error: 'Unauthorized: User ID missing.' });

Â  Â  // ðŸ’¥ FIX: Explicitly include CoachProfile using the alias 'CoachProfile'
Â  Â  const user = await User.findByPk(userId, { include: { model: CoachProfile, as: 'CoachProfile' } });
Â  Â  if (!user) return res.status(404).json({ error: 'User not found' });

Â  Â  const {
Â  Â  Â  firstName, lastName, email, phone,
Â  Â  Â  professionalTitle, profilePicture, websiteUrl, bio,
Â  Â  Â  yearsOfExperience, specialties, sessionTypes,
Â  Â  Â  certifications, education, pricing, availability
Â  Â  } = req.body;

Â  Â  // Update user fields
Â  Â  await user.update({ firstName, lastName, email, phone });

Â  Â  // Update or create coach profile
Â  Â  let coachProfile = user.CoachProfile;
Â  Â  if (!coachProfile) coachProfile = await CoachProfile.create({ userId });

Â  Â  await coachProfile.update({
Â  Â  Â  professionalTitle,
Â  Â  Â  profilePicture,
Â  Â  Â  websiteUrl,
Â  Â  Â  bio,
Â  Â  Â  yearsOfExperience: parseInt(yearsOfExperience) || 0,
Â  Â  Â  specialties: specialties || '[]',
Â  Â  Â  sessionTypes: sessionTypes || '[]',
Â  Â  Â  certifications: certifications || '[]',
Â  Â  Â  education: education || '[]',
Â  Â  Â  pricing: pricing || '{}',
Â  Â  Â  availability: availability || '{}'
Â  Â  });

    // Fetch the updated user object with all includes for the return value
    const updatedUser = await User.findByPk(userId, {
        include: [
            { model: CoachProfile, as: 'CoachProfile' },
            { model: ClientProfile, as: 'ClientProfile' }
        ],
    });

Â  Â  res.json({ user: updatedUser.get({ plain: true }) });
Â  } catch (error) {
Â  Â  console.error('Error updating coach profile:', error);
Â  Â  res.status(500).json({ error: 'Failed to update profile' });
Â  }
};

// ==============================
// ADD Item (certification/education)
// ==============================
const addItem = async (req, res) => {
Â  try {
Â  Â  const { type, item } = req.body; // type: 'certifications' | 'education'
Â  Â  const userId = req.user.userId;
    if (!userId) return res.status(401).json({ error: 'Unauthorized: User ID missing.' });
    
Â  Â  const coachProfile = await CoachProfile.findOne({ where: { userId } });
Â  Â  if (!coachProfile) return res.status(404).json({ error: 'Coach profile not found' });

Â  Â  const currentItems = safeParse(coachProfile[type]) || [];
Â  Â  currentItems.push({ ...item, id: uuidv4() });

Â  Â  await coachProfile.update({ [type]: JSON.stringify(currentItems) });
Â  Â  res.json({ [type]: currentItems });
Â  } catch (error) {
Â  Â  console.error('Error adding item:', error);
Â  Â  res.status(500).json({ error: 'Failed to add item' });
Â  }
};

// ==============================
// REMOVE Item (certification/education)
// ==============================
const removeItem = async (req, res) => {
Â  try {
Â  Â  const { type, id } = req.body;
Â  Â  const userId = req.user.userId;
    if (!userId) return res.status(401).json({ error: 'Unauthorized: User ID missing.' });

Â  Â  const coachProfile = await CoachProfile.findOne({ where: { userId } });
Â  Â  if (!coachProfile) return res.status(404).json({ error: 'Coach profile not found' });

Â  Â  const currentItems = (safeParse(coachProfile[type]) || []).filter(item => item.id !== id);
Â  Â  await coachProfile.update({ [type]: JSON.stringify(currentItems) });
Â  Â  res.json({ [type]: currentItems });
Â  } catch (error) {
Â  Â  console.error('Error removing item:', error);
Â  Â  res.status(500).json({ error: 'Failed to remove item' });
Â  }
};

// ==============================
// UPLOAD Profile Picture
// ==============================
const uploadProfilePicture = async (req, res) => {
Â  try {
Â  Â  if (!req.file) return res.status(400).json({ error: 'No file uploaded' });
Â  Â  const userId = req.user.userId;
    if (!userId) return res.status(401).json({ error: 'Unauthorized: User ID missing.' });

Â  Â  const coachProfile = await CoachProfile.findOne({ where: { userId } });
Â  Â  if (!coachProfile) return res.status(404).json({ error: 'Coach profile not found' });

Â  Â  const filePath = `/uploads/${req.file.filename}`;
Â  Â  await coachProfile.update({ profilePicture: filePath });

Â  Â  res.json({ profilePicture: filePath });
Â  } catch (error) {
Â  Â  console.error('Error uploading profile picture:', error);
Â  Â  res.status(500).json({ error: 'Failed to upload profile picture' });
Â  }
};

// ==============================
// GET Public Coach Profile
// ==============================
const getPublicCoachProfile = async (req, res) => {
Â  try {
Â  Â  const coachId = req.params.id;

Â  Â  const coachProfile = await CoachProfile.findOne({
Â  Â  Â  where: { userId: coachId },
Â  Â  Â  include: [
Â  Â  Â  Â  {
Â  Â  Â  Â  Â  model: User,
Â  Â  Â  Â  Â  as: 'user',
Â  Â  Â  Â  Â  attributes: ['id', 'firstName', 'lastName', 'email', 'phone'],
Â  Â  Â  Â  Â  include: [
Â  Â  Â  Â  Â  Â  { model: Event, as: 'events', required: false, where: { status: 'published' } }
Â  Â  Â  Â  Â  ]
Â  Â  Â  Â  },
Â  Â  Â  Â  { model: Testimonial, as: 'testimonials', required: false }
Â  Â  Â  ]
Â  Â  });

Â  Â  if (!coachProfile || !coachProfile.user) {
Â  Â  Â  return res.status(404).json({ error: 'Coach profile not found' });
Â  Â  }

Â  Â  const user = coachProfile.user.get({ plain: true });
Â  Â  res.status(200).json({
Â  Â  Â  coach: {
Â  Â  Â  Â  id: user.id,
Â  Â  Â  Â  name: `${user.firstName} ${user.lastName}`,
Â  Â  Â  Â  email: user.email,
Â  Â  Â  Â  phone: user.phone,
Â  Â  Â  Â  profileImage: coachProfile.profilePicture,
Â  Â  Â  Â  events: user.events || [],
Â  Â  Â  Â  testimonials: coachProfile.testimonials || [],
Â  Â  Â  Â  title: coachProfile.professionalTitle,
Â  Â  Â  Â  rating: 4.9,
Â  Â  Â  Â  totalReviews: coachProfile.testimonials?.length || 0,
Â  Â  Â  Â  totalClients: 0,
Â  Â  Â  Â  yearsExperience: coachProfile.yearsOfExperience || 0,
Â  Â  Â  Â  shortBio: coachProfile.bio ? coachProfile.bio.substring(0, 150) + '...' : '',
Â  Â  Â  Â  fullBio: coachProfile.bio || '',
Â  Â  Â  Â  isAvailable: true,
Â  Â  Â  Â  avgResponseTime: coachProfile.responseTime || 'within-4h',
Â  Â  Â  Â  timezone: coachProfile.availability?.timezone || 'UTC',
Â  Â  Â  Â  startingPrice: coachProfile.pricing?.individual || 0,
Â  Â  Â  }
Â  Â  });
Â  } catch (error) {
Â  Â  console.error('Error fetching public coach profile:', error);
Â  Â  res.status(500).json({ error: 'Failed to fetch public profile' });
Â  }
};

module.exports = {
Â  getCoachProfile,
Â  updateCoachProfile,
Â  addItem,
Â  removeItem,
Â  uploadProfilePicture,
Â  getPublicCoachProfile
};